import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from typing import Dict
from db import get_db
from wallet import WalletManager
from models import Player
from sqlalchemy.orm import Session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEB_APP_URL", "https://your-domain.com/pages/gameplay/index.html")

async def get_or_create_player(db: Session, user: dict) -> Player:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞"""
    player = db.query(Player).filter(Player.telegram_id == user.id).first()
    if not player:
        player = Player(
            telegram_id=user.id,
            first_name=user.first_name,
            last_name=user.last_name,
            username=user.username,
            photo_url=user.photo_url if hasattr(user, 'photo_url') else None,
            balance=1000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        )
        db.add(player)
        db.commit()
        db.refresh(player)
    return player

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        player = await get_or_create_player(db, user)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—à–µ–ª—å–∫–∞
        wallet = WalletManager(db)
        balance = await wallet.get_balance(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp
        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="history")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ï–ö–ê, {user.first_name}!\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    finally:
        db.close()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    db = next(get_db())
    
    try:
        wallet = WalletManager(db)
        
        if query.data == "balance":
            balance = await wallet.get_balance(user_id)
            await query.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ")
            
        elif query.data == "stats":
            player = db.query(Player).filter(Player.telegram_id == user_id).first()
            if player:
                win_rate = player.wins / player.games_played * 100 if player.games_played > 0 else 0
                await query.answer(
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {player.games_played}\n"
                    f"–ü–æ–±–µ–¥: {player.wins}\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%"
                )
        
        elif query.data == "history":
            transactions = await wallet.get_transaction_history(user_id, limit=5)
            if transactions:
                history_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
                for t in transactions:
                    action_text = {
                        'bet': '–°—Ç–∞–≤–∫–∞',
                        'win': '–í—ã–∏–≥—Ä—ã—à',
                        'loss': '–ü—Ä–æ–∏–≥—Ä—ã—à',
                        'fold': '–§–æ–ª–¥',
                        'svara': '–°–≤–∞—Ä–∞',
                        'join': '–í—Ö–æ–¥ –≤ –∏–≥—Ä—É',
                        'bluff': '–ë–ª–µ—Ñ'
                    }.get(t['action'], t['action'])
                    
                    history_text += f"{action_text}: {t['amount']}‚ÇΩ ({t['created_at'].strftime('%d.%m %H:%M')})\n"
                await query.answer(history_text)
            else:
                await query.answer("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞")
    finally:
        db.close()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"BOT_TOKEN {TELEGRAM_BOT_TOKEN}")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
